apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerInspectContainer


ext {
    groupDocker = 'docker'
}

def PORT_HOST = '3308'
def MYSQL_DEFAULT_PORT = '3306'

task checkContainer(type: DockerInspectContainer) {
    group groupDocker
    containerId = wsContainerId
    onError { exception ->
        if (exception.message != null && !exception.message.contains('No such container'))
            throw exception
        logger.quiet "No se pudo inspeccionar el contenedor!."
    }
}


task stopContainer(type: DockerStopContainer) {
    group groupDocker
    dependsOn checkContainer
    containerId = wsContainerId
    onError { exception ->
        if (exception.message != null) {
            if (!exception.message.contains('No such container')) {
                throw exception
            } else {
                logger.quiet "No existe el contenedor con el ID: '${containerId.get()}'."
            }
        }
        logger.quiet "No se pudo detener el contenedor!."
    }
}

task removeContainer(type: DockerRemoveContainer) {
    group groupDocker
    dependsOn stopContainer
    removeVolumes = true
    containerId = wsContainerId
    onError { exception ->
        if (exception.message != null && !exception.message.contains('No such container'))
            throw exception
        logger.quiet "No se pudo eliminar el contenedor!"
    }
}


task removeImage(type: DockerRemoveImage) {
    group groupDocker
    dependsOn removeContainer
    imageId = wsImageId
    force = true
    onError { exception ->
        if (exception.message != null && !exception.message.contains('No such image'))
            throw exception
        logger.quiet "No se pudo eliminar la imagen!"
    }
}

task copyProps(type: Copy) {
    group groupDocker
    dependsOn removeContainer
    from file('charset.cnf')
    into 'context/'
}

task createDockerfile(type: Dockerfile) {
    group groupDocker
    dependsOn copyProps
    from 'mysql:8.0'
    label(['Author': '\'Humberto-Ramírez\''])
    copyFile 'charset.cnf', '/etc/mysql/conf.d/charset.cnf'
    destFile = new File('context/Dockerfile')
}

task buildImage(type: DockerBuildImage) {
    group groupDocker
    dependsOn createDockerfile, removeImage
    inputDir = createDockerfile.destFile.get().asFile.parentFile
    def finalTag = wsImageId
    remove.set(true)
    imageId = finalTag
    images.add(finalTag)
    onComplete{
        logger.quiet "Se creó la Imagen con tag: '${finalTag}'."
    }
}

task createContainer(type: DockerCreateContainer) {
    group groupDocker
    targetImageId buildImage.getImageId()
    dependsOn buildImage
    hostConfig.memory.set(new Long('3221225472'))
    hostConfig.portBindings.set(["$PORT_HOST:$MYSQL_DEFAULT_PORT"])
    hostConfig.autoRemove.set(true)
    containerName.set(wsContainerId)
    envVars.set(['MYSQL_ROOT_PASSWORD': rootPassword, 'MYSQL_DATABASE': nameDatabase, 'MYSQL_USER': userMysql, 'MYSQL_PASSWORD': userMysqlPassword])
    cmd.set(['mysqld'])
}

task startContainer(type: DockerStartContainer) {
    group groupDocker
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}
